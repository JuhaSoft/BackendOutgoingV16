// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240516080145_aproverrepairs")]
    partial class aproverrepairs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Domain.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Model.DataContrplType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CTName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataContrplTypes");
                });

            modelBuilder.Entity("Domain.Model.DataLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LineId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DataLines");
                });

            modelBuilder.Entity("Domain.Model.DataReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PsnPos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefCompare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefPos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefereceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StationID");

                    b.ToTable("DataReferences");
                });

            modelBuilder.Entity("Domain.Model.DataReferenceParameterCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParameterCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id", "DataReferenceId", "ParameterCheckId");

                    b.HasIndex("DataReferenceId");

                    b.HasIndex("ParameterCheckId");

                    b.ToTable("DataReferenceParameterChecks");
                });

            modelBuilder.Entity("Domain.Model.DataTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("DTisDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TrackPSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrackingDateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TrackingLastStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrackingResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUserIdChecked")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrackingWO")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("TrackingLastStationId");

                    b.HasIndex("TrackingUserIdChecked");

                    b.ToTable("DataTracks");
                });

            modelBuilder.Entity("Domain.Model.DataTrackChecking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprRemaks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approve")
                        .HasColumnType("bit");

                    b.Property<string>("DTCValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DTCisDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("DataTrackID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PCID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("DataTrackID");

                    b.HasIndex("ErrorId");

                    b.HasIndex("PCID");

                    b.ToTable("DataTrackCheckings");
                });

            modelBuilder.Entity("Domain.Model.ErrorMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorMessages");
                });

            modelBuilder.Entity("Domain.Model.ErrorTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PCID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrackPSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrackingDateCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.HasIndex("PCID");

                    b.ToTable("ErrorTrack");
                });

            modelBuilder.Entity("Domain.Model.ImageDataCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataTrackCheckingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DataTrackCheckingId");

                    b.ToTable("ImageDataChecks");
                });

            modelBuilder.Entity("Domain.Model.LastStationID", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("LastStationIDs");
                });

            modelBuilder.Entity("Domain.Model.ParameterCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSampleUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ParameterChecks");
                });

            modelBuilder.Entity("Domain.Model.ParameterCheckErrorMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParameterCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id", "ParameterCheckId", "ErrorMessageId");

                    b.HasIndex("ErrorMessageId");

                    b.HasIndex("ParameterCheckId");

                    b.ToTable("ParameterCheckErrorMessages");
                });

            modelBuilder.Entity("Domain.Model.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.Model.SComboBoxOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OptionValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SComboBoxOptions");
                });

            modelBuilder.Entity("Domain.Model.SelectOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PCID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOptionValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SelectOptions");
                });

            modelBuilder.Entity("Domain.Model.TraceProduct", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TraceProducts");
                });

            modelBuilder.Entity("Domain.Model.WorkOrder", b =>
                {
                    b.Property<string>("WoNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FailQTY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PassQTY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdCreate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WOisDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WoCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("WoQTY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WoReferenceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WoStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WoNumber");

                    b.HasIndex("UserIdCreate");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Model.DataReference", b =>
                {
                    b.HasOne("Domain.Model.LastStationID", "LastStationID")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LastStationID");
                });

            modelBuilder.Entity("Domain.Model.DataReferenceParameterCheck", b =>
                {
                    b.HasOne("Domain.Model.DataReference", "DataReference")
                        .WithMany("DataReferenceParameterChecks")
                        .HasForeignKey("DataReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.ParameterCheck", "ParameterCheck")
                        .WithMany("DataReferenceParameterChecks")
                        .HasForeignKey("ParameterCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataReference");

                    b.Navigation("ParameterCheck");
                });

            modelBuilder.Entity("Domain.Model.DataTrack", b =>
                {
                    b.HasOne("Domain.Model.AppUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovalId");

                    b.HasOne("Domain.Model.LastStationID", "LastStationID")
                        .WithMany()
                        .HasForeignKey("TrackingLastStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("TrackingUserIdChecked");

                    b.Navigation("Approver");

                    b.Navigation("LastStationID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Model.DataTrackChecking", b =>
                {
                    b.HasOne("Domain.Model.AppUser", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovalId");

                    b.HasOne("Domain.Model.DataTrack", "DataTracks")
                        .WithMany("DataTrackCheckings")
                        .HasForeignKey("DataTrackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.ErrorMessage", "ErrorMessage")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Model.ParameterCheck", "ParameterCheck")
                        .WithMany()
                        .HasForeignKey("PCID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("DataTracks");

                    b.Navigation("ErrorMessage");

                    b.Navigation("ParameterCheck");
                });

            modelBuilder.Entity("Domain.Model.ErrorTrack", b =>
                {
                    b.HasOne("Domain.Model.ErrorMessage", "ErrorMessage")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Model.ParameterCheck", "ParameterCheck")
                        .WithMany()
                        .HasForeignKey("PCID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ErrorMessage");

                    b.Navigation("ParameterCheck");
                });

            modelBuilder.Entity("Domain.Model.ImageDataCheck", b =>
                {
                    b.HasOne("Domain.Model.DataTrackChecking", "DataTrackChecking")
                        .WithMany("ImageDataChecks")
                        .HasForeignKey("DataTrackCheckingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataTrackChecking");
                });

            modelBuilder.Entity("Domain.Model.LastStationID", b =>
                {
                    b.HasOne("Domain.Model.DataLine", "DataLine")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataLine");
                });

            modelBuilder.Entity("Domain.Model.ParameterCheckErrorMessage", b =>
                {
                    b.HasOne("Domain.Model.ErrorMessage", "ErrorMessage")
                        .WithMany("ParameterCheckErrorMessages")
                        .HasForeignKey("ErrorMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.ParameterCheck", "ParameterCheck")
                        .WithMany("ParameterCheckErrorMessages")
                        .HasForeignKey("ParameterCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ErrorMessage");

                    b.Navigation("ParameterCheck");
                });

            modelBuilder.Entity("Domain.Model.RefreshToken", b =>
                {
                    b.HasOne("Domain.Model.AppUser", "AppUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.Model.WorkOrder", b =>
                {
                    b.HasOne("Domain.Model.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.AppUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Model.DataReference", b =>
                {
                    b.Navigation("DataReferenceParameterChecks");
                });

            modelBuilder.Entity("Domain.Model.DataTrack", b =>
                {
                    b.Navigation("DataTrackCheckings");
                });

            modelBuilder.Entity("Domain.Model.DataTrackChecking", b =>
                {
                    b.Navigation("ImageDataChecks");
                });

            modelBuilder.Entity("Domain.Model.ErrorMessage", b =>
                {
                    b.Navigation("ParameterCheckErrorMessages");
                });

            modelBuilder.Entity("Domain.Model.ParameterCheck", b =>
                {
                    b.Navigation("DataReferenceParameterChecks");

                    b.Navigation("ParameterCheckErrorMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
